const { getUser, updateUser } = require('../utils/database.js');
const { Collection, EmbedBuilder, PermissionsBitField } = require('discord.js');
const automodConfig = require('../automodConfig.json');

// ESTA LINHA PROVAVELMENTE ESTAVA FALTANDO
const xpCooldowns = new Collection();

// Fun√ß√£o auxiliar para reutilizar o c√≥digo de puni√ß√£o
async function reportViolation(message, reason, client) {
  const logChannelId = process.env.MOD_LOG_CHANNEL_ID;
  if (!logChannelId) return;

  const logChannel = await message.guild.channels.fetch(logChannelId).catch(() => null);
  if (!logChannel) return;

  // Constr√≥i o Embed de alerta
  const alertEmbed = new EmbedBuilder()
    .setColor('#FF0000')
    .setTitle('üö® ALERTA DE AUTOMOD üö®')
    .setDescription(`**Uma mensagem suspeita foi detectada e requer aten√ß√£o humana.**`)
    .addFields(
      { name: 'Autor', value: `${message.author} (${message.author.tag})`, inline: false },
      { name: 'Canal', value: `${message.channel}`, inline: false },
      { name: 'Motivo do Alerta', value: reason, inline: false },
      {
        name: 'Conte√∫do da Mensagem',
        value: `\`\`\`${message.content.substring(0, 1020)}\`\`\``,
        inline: false,
      },
      { name: 'A√ß√£o R√°pida', value: `[Clique aqui para ir at√© a mensagem](${message.url})` }
    )
    .setTimestamp()
    .setFooter({ text: 'A decis√£o de punir ou n√£o cabe a um moderador.' });

  // Constr√≥i os bot√µes de a√ß√£o para os moderadores
  const actionRow = new ActionRowBuilder().addComponents(
    new ButtonBuilder()
      .setCustomId(`automod-delete-${message.channel.id}-${message.id}`)
      .setLabel('Apagar Mensagem')
      .setStyle(ButtonStyle.Danger)
      .setEmoji('üóëÔ∏è'),
    new ButtonBuilder()
      .setCustomId('automod-ignore')
      .setLabel('Ignorar (Falso Alarme)')
      .setStyle(ButtonStyle.Secondary)
      .setEmoji('‚úÖ')
  );

  // Envia o alerta mencionando o cargo de moderador
  const modRoleId = process.env.MOD_ROLE_ID;
  const alertContent = modRoleId
    ? `<@&${modRoleId}>, nova ocorr√™ncia para an√°lise:`
    : 'Nova ocorr√™ncia para an√°lise:';

  await logChannel.send({ content: alertContent, embeds: [alertEmbed], components: [actionRow] });
}

module.exports = {
  name: 'messageCreate',

  async execute(message, client) {
    if (message.author.bot || !message.guild) return;

    // =======================================================
    // M√ìDULO DE AUTOMOD: DETEC√á√ÉO DE LINKS DE CONVITE
    // =======================================================
    try {
      if (!message.member.permissions.has(PermissionsBitField.Flags.ManageMessages)) {
        let violationReason = null;
        const lowerCaseMessage = message.content.toLowerCase();

        // 1. Verifica√ß√µes Imediatas (Palavras Proibidas e Links)
        const foundBannedWord = automodConfig.bannedWords.find((word) =>
          lowerCaseMessage.includes(word)
        );
        if (foundBannedWord) {
          violationReason = `A mensagem continha um termo proibido: "${foundBannedWord}".`;
        } else if (/(discord\.(gg|com\/invite)\/[a-zA-Z0-9]+)/.test(message.content)) {
          violationReason = 'A mensagem continha um link de convite para outro servidor.';
        } else if (message.mentions.users.size > automodConfig.maxMentions) {
          violationReason = `A mensagem mencionava ${message.mentions.users.size} usu√°rios (limite: ${automodConfig.maxMentions}).`;
        }

        if (violationReason) {
          await handleViolation(message, violationReason, client);
          return;
        }

        // 2. Verifica√ß√£o de SPAM de CAPS LOCK (com mem√≥ria)
        const contentWithoutSpaces = message.content.replace(/\s/g, '');
        if (contentWithoutSpaces.length > 10) {
          const caps = contentWithoutSpaces.match(/[A-Z]/g)?.length || 0;
          const capsPercentage = (caps / contentWithoutSpaces.length) * 100;

          if (capsPercentage > automodConfig.maxCapsPercentage) {
            // A mensagem √© considerada "CAPS"
            const userData = capsSpamTracker.get(message.author.id) || { count: 0, messages: [] };
            userData.count++;
            userData.messages.push(message);

            // Define um timer. Se o usu√°rio n√£o mandar outra msg em CAPS em 15s, o contador reseta.
            if (userData.timer) clearTimeout(userData.timer);
            userData.timer = setTimeout(() => {
              capsSpamTracker.delete(message.author.id);
            }, 15000); // 15 segundos

            capsSpamTracker.set(message.author.id, userData);

            // Se o contador atingir o limite (5), PUNI√á√ÉO!
            if (userData.count >= 5) {
              violationReason = 'Envio de 5 ou mais mensagens seguidas em mai√∫sculas.';

              // Deleta todas as mensagens da sequ√™ncia
              for (const msg of userData.messages) {
                await msg.delete().catch(() => {}); // O catch evita erros se a msg j√° foi deletada
              }

              await handleViolation(message, violationReason, client);
              capsSpamTracker.delete(message.author.id); // Limpa o registro do infrator
              return;
            }
          } else {
            // Se a mensagem N√ÉO for em CAPS, a sequ√™ncia √© quebrada. Limpa o registro.
            capsSpamTracker.delete(message.author.id);
          }
        }
      }
    } catch (error) {
      console.error('[Automod] Erro ao processar mensagem:', error);
    }

    // =======================================================
    // L√ìGICA DE GANHO DE XP
    // =======================================================
    try {
      const cooldownAmount = 60000; // Cooldown de 60 segundos (em milissegundos)
      const userId = message.author.id;
      const guildId = message.guild.id;

      // Verifica se o usu√°rio est√° na cole√ß√£o de cooldowns
      if (!xpCooldowns.has(userId)) {
        // Se n√£o estiver, adiciona XP
        let user = await getUser(userId, guildId);

        // Se o usu√°rio n√£o existir no banco de dados, cria um perfil padr√£o para ele
        if (!user) {
          user = { userId, guildId, xp: 0, level: 1 };
        }

        // Adiciona uma quantidade aleat√≥ria de XP (entre 15 e 25)
        const xpGained = Math.floor(Math.random() * 11) + 15;
        user.xp += xpGained;

        // Calcula o XP necess√°rio para o pr√≥ximo n√≠vel
        const xpToNextLevel = user.level * 300;

        // Verifica se o usu√°rio subiu de n√≠vel
        if (user.xp >= xpToNextLevel) {
          user.level++;
          // Opcional: Reseta o XP para o que sobrou ap√≥s subir de n√≠vel
          // user.xp = user.xp - xpToNextLevel;

          // Envia uma mensagem de parab√©ns no canal
          await message.channel.send(
            `üéâ **Promo√ß√£o!** Parab√©ns, ${message.author}! Voc√™ foi promovido a **N√≠vel ${user.level}** na hierarquia do Terreiro!`
          );
        }

        // Atualiza as informa√ß√µes do usu√°rio no banco de dados
        await updateUser(userId, guildId, user.xp, user.level);

        // Coloca o usu√°rio no cooldown
        xpCooldowns.set(userId, Date.now());
        setTimeout(() => xpCooldowns.delete(userId), cooldownAmount); // Remove do cooldown ap√≥s 60 segundos
      }
    } catch (error) {
      console.error('[XP System] Erro ao processar XP para o usu√°rio:', error);
    }

    // =======================================================
    // DICION√ÅRIO APRIMORADO DO DELEGADO BIRA
    // Agora ele suporta texto, respostas aleat√≥rias e rea√ß√µes.
    // =======================================================
    const keywordResponses = {
      // --- Respostas de Texto Simples (string) ---
      //prettier-ignore
      'delegado': 'T√¥ na escuta, meu nobre. Qual √© a ocorr√™ncia?', //prettier-ignore
      'obrigado bira': 'Tamo junto, campe√£o. Precisando, √© s√≥ chamar no r√°dio.', //prettier-ignore

      // --- Respostas Aleat√≥rias (array de strings) ---
      'boa noite': [
        'Boa noite, rapaziada. Bira iniciando a ronda noturna. Ju√≠zo, hein?',
        'Noite. Qualquer coisa, √© s√≥ chamar no r√°dio. C√¢mbio, desligo.',
        'Fechando o expediente por hoje... mentira, t√¥ de olho 24/7. Boa noite!',
      ],
      'e ai bira': ['Opa, firmeza?', 'Na escuta, campe√£o.', 'Fala, chefe. Tudo tranquilo?'],
      'bom dia': [
        'Bom dia, bom dia! Bora que hoje o servi√ßo t√° puxado.',
        'Caf√© na m√£o e olho no monitor. Bom dia, galera.',
        'Quem acordou, acordou. Quem n√£o acordou, acorda a√≠! O Bira j√° t√° na ativa.',
        'Bom dia, campe√£o! J√° t√¥ de p√© desde as cinco.',
      ],
      salve: [
        'Salve, bigode! Tudo em paz por a√≠?',
        'Salvado! Mantendo a ordem por aqui.',
        'Salve! Chegou na hora certa pro caf√© da guarita.',
      ],
      roubo: [
        // Perfeito para quando algu√©m "rouba" uma kill no jogo
        'Opa, opa! Calma a√≠. Acusa√ß√£o de roubo √© s√©ria. Apresente as provas no canal competente.',
        'Registrando a ocorr√™ncia de "suposto 171". A corregedoria vai apurar.',
        'Sem tumulto na minha √°rea! Resolvam isso no x1, na moral.',
      ],
      triste: [
        'Calma, campe√£o. Bota uma m√∫sica a√≠ pra animar.',
        'Fica assim n√£o, amig√£o. O patr√£o j√° errou jogada pior que essa.',
        'Quer um caf√©? Dizem que ajuda a resolver 90% dos problemas.',
      ],

      // --- Rea√ß√µes com Emoji (objeto) ---
      'amo esse server': { type: 'react', value: '‚ù§Ô∏è' }, //prettier-ignore
      'kkkk': { type: 'react', value: 'üòÇ' }, //prettier-ignore
      'obrigado': { type: 'react', value: 'üôè' }, //prettier-ignore
      'parab√©ns': { type: 'react', value: 'üéâ' }, //prettier-ignore
      'brabo': { type: 'react', value: 'üî•' }, //prettier-ignore
      'f': { type: 'react', value: 'üòî' }, //prettier-ignore
    };

    const lowerCaseMessage = message.content.toLowerCase();

    // Loop que verifica cada entrada do nosso dicion√°rio
    for (const keyword in keywordResponses) {
      if (lowerCaseMessage.includes(keyword)) {
        const response = keywordResponses[keyword];

        try {
          // Verificamos o TIPO de resposta que devemos dar
          if (Array.isArray(response)) {
            // Se for um array, pegamos uma resposta aleat√≥ria
            const randomIndex = Math.floor(Math.random() * response.length);
            await message.reply(response[randomIndex]);
          } else if (typeof response === 'object' && response.type === 'react') {
            // Se for um objeto do tipo 'react', reagimos com o emoji
            await message.react(response.value);
          } else {
            // Se for qualquer outra coisa (uma string de texto), respondemos normalmente
            await message.reply(response);
          }
        } catch (error) {
          console.error('Erro ao tentar interagir com mensagem:', error);
        }

        return; // Encerra ap√≥s a primeira correspond√™ncia
      }
    }
  },
};
